// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace pb {
class BroadCast;
class BroadCastDefaultTypeInternal;
extern BroadCastDefaultTypeInternal _BroadCast_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class SyncPlayerId;
class SyncPlayerIdDefaultTypeInternal;
extern SyncPlayerIdDefaultTypeInternal _SyncPlayerId_default_instance_;
class SyncPlayers;
class SyncPlayersDefaultTypeInternal;
extern SyncPlayersDefaultTypeInternal _SyncPlayers_default_instance_;
class Talk;
class TalkDefaultTypeInternal;
extern TalkDefaultTypeInternal _Talk_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::BroadCast* Arena::CreateMaybeMessage<::pb::BroadCast>(Arena*);
template<> ::pb::Player* Arena::CreateMaybeMessage<::pb::Player>(Arena*);
template<> ::pb::Position* Arena::CreateMaybeMessage<::pb::Position>(Arena*);
template<> ::pb::SyncPlayerId* Arena::CreateMaybeMessage<::pb::SyncPlayerId>(Arena*);
template<> ::pb::SyncPlayers* Arena::CreateMaybeMessage<::pb::SyncPlayers>(Arena*);
template<> ::pb::Talk* Arena::CreateMaybeMessage<::pb::Talk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class SyncPlayerId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SyncPlayerId) */ {
 public:
  inline SyncPlayerId() : SyncPlayerId(nullptr) {};
  virtual ~SyncPlayerId();

  SyncPlayerId(const SyncPlayerId& from);
  SyncPlayerId(SyncPlayerId&& from) noexcept
    : SyncPlayerId() {
    *this = ::std::move(from);
  }

  inline SyncPlayerId& operator=(const SyncPlayerId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerId& operator=(SyncPlayerId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncPlayerId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPlayerId* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerId*>(
               &_SyncPlayerId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncPlayerId& a, SyncPlayerId& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerId* New() const final {
    return CreateMaybeMessage<SyncPlayerId>(nullptr);
  }

  SyncPlayerId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerId& from);
  void MergeFrom(const SyncPlayerId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SyncPlayerId";
  }
  protected:
  explicit SyncPlayerId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SyncPlayerId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Talk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Talk) */ {
 public:
  inline Talk() : Talk(nullptr) {};
  virtual ~Talk();

  Talk(const Talk& from);
  Talk(Talk&& from) noexcept
    : Talk() {
    *this = ::std::move(from);
  }

  inline Talk& operator=(const Talk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talk& operator=(Talk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Talk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Talk* internal_default_instance() {
    return reinterpret_cast<const Talk*>(
               &_Talk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Talk& a, Talk& b) {
    a.Swap(&b);
  }
  inline void Swap(Talk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Talk* New() const final {
    return CreateMaybeMessage<Talk>(nullptr);
  }

  Talk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Talk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Talk& from);
  void MergeFrom(const Talk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Talk";
  }
  protected:
  explicit Talk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:pb.Talk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Position) */ {
 public:
  inline Position() : Position(nullptr) {};
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kVFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float v = 4;
  void clear_v();
  float v() const;
  void set_v(float value);
  private:
  float _internal_v() const;
  void _internal_set_v(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BroadCast PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BroadCast) */ {
 public:
  inline BroadCast() : BroadCast(nullptr) {};
  virtual ~BroadCast();

  BroadCast(const BroadCast& from);
  BroadCast(BroadCast&& from) noexcept
    : BroadCast() {
    *this = ::std::move(from);
  }

  inline BroadCast& operator=(const BroadCast& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadCast& operator=(BroadCast&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadCast& default_instance();

  enum DataCase {
    kContent = 3,
    kPosition = 4,
    kActionData = 5,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadCast* internal_default_instance() {
    return reinterpret_cast<const BroadCast*>(
               &_BroadCast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BroadCast& a, BroadCast& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadCast* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadCast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadCast* New() const final {
    return CreateMaybeMessage<BroadCast>(nullptr);
  }

  BroadCast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadCast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadCast& from);
  void MergeFrom(const BroadCast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadCast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BroadCast";
  }
  protected:
  explicit BroadCast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kContentFieldNumber = 3,
    kPositionFieldNumber = 4,
    kActionDataFieldNumber = 5,
  };
  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // string content = 3;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .pb.Position position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::pb::Position& position() const;
  ::pb::Position* release_position();
  ::pb::Position* mutable_position();
  void set_allocated_position(::pb::Position* position);
  private:
  const ::pb::Position& _internal_position() const;
  ::pb::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::pb::Position* position);
  ::pb::Position* unsafe_arena_release_position();

  // int32 actionData = 5;
  private:
  bool _internal_has_actiondata() const;
  public:
  void clear_actiondata();
  ::PROTOBUF_NAMESPACE_ID::int32 actiondata() const;
  void set_actiondata(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_actiondata() const;
  void _internal_set_actiondata(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_Data();
  DataCase Data_case() const;
  // @@protoc_insertion_point(class_scope:pb.BroadCast)
 private:
  class _Internal;
  void set_has_content();
  void set_has_position();
  void set_has_actiondata();

  inline bool has_Data() const;
  inline void clear_has_Data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  union DataUnion {
    DataUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::pb::Position* position_;
    ::PROTOBUF_NAMESPACE_ID::int32 actiondata_;
  } Data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Player PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Player) */ {
 public:
  inline Player() : Player(nullptr) {};
  virtual ~Player();

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .pb.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::pb::Position& position() const;
  ::pb::Position* release_position();
  ::pb::Position* mutable_position();
  void set_allocated_position(::pb::Position* position);
  private:
  const ::pb::Position& _internal_position() const;
  ::pb::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::pb::Position* position);
  ::pb::Position* unsafe_arena_release_position();

  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::Position* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayers PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SyncPlayers) */ {
 public:
  inline SyncPlayers() : SyncPlayers(nullptr) {};
  virtual ~SyncPlayers();

  SyncPlayers(const SyncPlayers& from);
  SyncPlayers(SyncPlayers&& from) noexcept
    : SyncPlayers() {
    *this = ::std::move(from);
  }

  inline SyncPlayers& operator=(const SyncPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayers& operator=(SyncPlayers&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncPlayers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPlayers* internal_default_instance() {
    return reinterpret_cast<const SyncPlayers*>(
               &_SyncPlayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SyncPlayers& a, SyncPlayers& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayers* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayers* New() const final {
    return CreateMaybeMessage<SyncPlayers>(nullptr);
  }

  SyncPlayers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayers& from);
  void MergeFrom(const SyncPlayers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SyncPlayers";
  }
  protected:
  explicit SyncPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .pb.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::pb::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Player >*
      mutable_players();
  private:
  const ::pb::Player& _internal_players(int index) const;
  ::pb::Player* _internal_add_players();
  public:
  const ::pb::Player& players(int index) const;
  ::pb::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Player >&
      players() const;

  // @@protoc_insertion_point(class_scope:pb.SyncPlayers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Player > players_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncPlayerId

// int32 playerId = 1;
inline void SyncPlayerId::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerId::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerId::playerid() const {
  // @@protoc_insertion_point(field_get:pb.SyncPlayerId.playerId)
  return _internal_playerid();
}
inline void SyncPlayerId::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SyncPlayerId::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:pb.SyncPlayerId.playerId)
}

// -------------------------------------------------------------------

// Talk

// string content = 1;
inline void Talk::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Talk::content() const {
  // @@protoc_insertion_point(field_get:pb.Talk.content)
  return _internal_content();
}
inline void Talk::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:pb.Talk.content)
}
inline std::string* Talk::mutable_content() {
  // @@protoc_insertion_point(field_mutable:pb.Talk.content)
  return _internal_mutable_content();
}
inline const std::string& Talk::_internal_content() const {
  return content_.Get();
}
inline void Talk::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Talk::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Talk.content)
}
inline void Talk::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Talk.content)
}
inline void Talk::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Talk.content)
}
inline std::string* Talk::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Talk::release_content() {
  // @@protoc_insertion_point(field_release:pb.Talk.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Talk::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Talk.content)
}
inline std::string* Talk::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.Talk.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Talk::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Talk.content)
}

// -------------------------------------------------------------------

// Position

// float x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::_internal_x() const {
  return x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:pb.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:pb.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::_internal_y() const {
  return y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:pb.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:pb.Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::_internal_z() const {
  return z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:pb.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:pb.Position.z)
}

// float v = 4;
inline void Position::clear_v() {
  v_ = 0;
}
inline float Position::_internal_v() const {
  return v_;
}
inline float Position::v() const {
  // @@protoc_insertion_point(field_get:pb.Position.v)
  return _internal_v();
}
inline void Position::_internal_set_v(float value) {
  
  v_ = value;
}
inline void Position::set_v(float value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:pb.Position.v)
}

// -------------------------------------------------------------------

// BroadCast

// int32 playerId = 1;
inline void BroadCast::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadCast::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadCast::playerid() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.playerId)
  return _internal_playerid();
}
inline void BroadCast::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void BroadCast::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:pb.BroadCast.playerId)
}

// int32 type = 2;
inline void BroadCast::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadCast::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadCast::type() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.type)
  return _internal_type();
}
inline void BroadCast::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void BroadCast::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.BroadCast.type)
}

// string content = 3;
inline bool BroadCast::_internal_has_content() const {
  return Data_case() == kContent;
}
inline void BroadCast::set_has_content() {
  _oneof_case_[0] = kContent;
}
inline void BroadCast::clear_content() {
  if (_internal_has_content()) {
    Data_.content_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_Data();
  }
}
inline const std::string& BroadCast::content() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.content)
  return _internal_content();
}
inline void BroadCast::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:pb.BroadCast.content)
}
inline std::string* BroadCast::mutable_content() {
  // @@protoc_insertion_point(field_mutable:pb.BroadCast.content)
  return _internal_mutable_content();
}
inline const std::string& BroadCast::_internal_content() const {
  if (_internal_has_content()) {
    return Data_.content_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BroadCast::_internal_set_content(const std::string& value) {
  if (!_internal_has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BroadCast::set_content(std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.BroadCast.content)
  if (!_internal_has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.BroadCast.content)
}
inline void BroadCast::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.BroadCast.content)
}
inline void BroadCast::set_content(const char* value,
                             size_t size) {
  if (!_internal_has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.BroadCast.content)
}
inline std::string* BroadCast::_internal_mutable_content() {
  if (!_internal_has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Data_.content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BroadCast::release_content() {
  // @@protoc_insertion_point(field_release:pb.BroadCast.content)
  if (_internal_has_content()) {
    clear_has_Data();
    return Data_.content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void BroadCast::set_allocated_content(std::string* content) {
  if (has_Data()) {
    clear_Data();
  }
  if (content != nullptr) {
    set_has_content();
    Data_.content_.UnsafeSetDefault(content);
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BroadCast.content)
}
inline std::string* BroadCast::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.BroadCast.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_content()) {
    clear_has_Data();
    return Data_.content_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void BroadCast::unsafe_arena_set_allocated_content(std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_content()) {
    Data_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_Data();
  if (content) {
    set_has_content();
    Data_.content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.BroadCast.content)
}

// .pb.Position position = 4;
inline bool BroadCast::_internal_has_position() const {
  return Data_case() == kPosition;
}
inline bool BroadCast::has_position() const {
  return _internal_has_position();
}
inline void BroadCast::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void BroadCast::clear_position() {
  if (_internal_has_position()) {
    if (GetArena() == nullptr) {
      delete Data_.position_;
    }
    clear_has_Data();
  }
}
inline ::pb::Position* BroadCast::release_position() {
  // @@protoc_insertion_point(field_release:pb.BroadCast.position)
  if (_internal_has_position()) {
    clear_has_Data();
      ::pb::Position* temp = Data_.position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Data_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::Position& BroadCast::_internal_position() const {
  return _internal_has_position()
      ? *Data_.position_
      : *reinterpret_cast< ::pb::Position*>(&::pb::_Position_default_instance_);
}
inline const ::pb::Position& BroadCast::position() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.position)
  return _internal_position();
}
inline ::pb::Position* BroadCast::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.BroadCast.position)
  if (_internal_has_position()) {
    clear_has_Data();
    ::pb::Position* temp = Data_.position_;
    Data_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BroadCast::unsafe_arena_set_allocated_position(::pb::Position* position) {
  clear_Data();
  if (position) {
    set_has_position();
    Data_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.BroadCast.position)
}
inline ::pb::Position* BroadCast::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_Data();
    set_has_position();
    Data_.position_ = CreateMaybeMessage< ::pb::Position >(GetArena());
  }
  return Data_.position_;
}
inline ::pb::Position* BroadCast::mutable_position() {
  // @@protoc_insertion_point(field_mutable:pb.BroadCast.position)
  return _internal_mutable_position();
}

// int32 actionData = 5;
inline bool BroadCast::_internal_has_actiondata() const {
  return Data_case() == kActionData;
}
inline void BroadCast::set_has_actiondata() {
  _oneof_case_[0] = kActionData;
}
inline void BroadCast::clear_actiondata() {
  if (_internal_has_actiondata()) {
    Data_.actiondata_ = 0;
    clear_has_Data();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadCast::_internal_actiondata() const {
  if (_internal_has_actiondata()) {
    return Data_.actiondata_;
  }
  return 0;
}
inline void BroadCast::_internal_set_actiondata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_actiondata()) {
    clear_Data();
    set_has_actiondata();
  }
  Data_.actiondata_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadCast::actiondata() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.actionData)
  return _internal_actiondata();
}
inline void BroadCast::set_actiondata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_actiondata(value);
  // @@protoc_insertion_point(field_set:pb.BroadCast.actionData)
}

inline bool BroadCast::has_Data() const {
  return Data_case() != DATA_NOT_SET;
}
inline void BroadCast::clear_has_Data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline BroadCast::DataCase BroadCast::Data_case() const {
  return BroadCast::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Player

// int32 playerId = 1;
inline void Player::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::playerid() const {
  // @@protoc_insertion_point(field_get:pb.Player.playerId)
  return _internal_playerid();
}
inline void Player::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void Player::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:pb.Player.playerId)
}

// .pb.Position position = 2;
inline bool Player::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Player::has_position() const {
  return _internal_has_position();
}
inline void Player::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::pb::Position& Player::_internal_position() const {
  const ::pb::Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Position*>(
      &::pb::_Position_default_instance_);
}
inline const ::pb::Position& Player::position() const {
  // @@protoc_insertion_point(field_get:pb.Player.position)
  return _internal_position();
}
inline void Player::unsafe_arena_set_allocated_position(
    ::pb::Position* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Player.position)
}
inline ::pb::Position* Player::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Position* Player::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:pb.Player.position)
  
  ::pb::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::pb::Position* Player::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Position>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::pb::Position* Player::mutable_position() {
  // @@protoc_insertion_point(field_mutable:pb.Player.position)
  return _internal_mutable_position();
}
inline void Player::set_allocated_position(::pb::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:pb.Player.position)
}

// -------------------------------------------------------------------

// SyncPlayers

// repeated .pb.Player players = 1;
inline int SyncPlayers::_internal_players_size() const {
  return players_.size();
}
inline int SyncPlayers::players_size() const {
  return _internal_players_size();
}
inline void SyncPlayers::clear_players() {
  players_.Clear();
}
inline ::pb::Player* SyncPlayers::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SyncPlayers.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Player >*
SyncPlayers::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:pb.SyncPlayers.players)
  return &players_;
}
inline const ::pb::Player& SyncPlayers::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::pb::Player& SyncPlayers::players(int index) const {
  // @@protoc_insertion_point(field_get:pb.SyncPlayers.players)
  return _internal_players(index);
}
inline ::pb::Player* SyncPlayers::_internal_add_players() {
  return players_.Add();
}
inline ::pb::Player* SyncPlayers::add_players() {
  // @@protoc_insertion_point(field_add:pb.SyncPlayers.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Player >&
SyncPlayers::players() const {
  // @@protoc_insertion_point(field_list:pb.SyncPlayers.players)
  return players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
